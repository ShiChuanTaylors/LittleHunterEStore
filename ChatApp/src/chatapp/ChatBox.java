/*
 * Taylor's SoCIT - Bachelor's of Software Engineering (Hons)
 * Distributed Application Development Assignment 1 - Chat System
 * Author: Ting Shi Chuan (0313664)
 */
package chatapp;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ConcurrentModificationException;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author ting
 */
public class ChatBox extends javax.swing.JFrame {

    /**
     * Creates new form ChatBox
     */
    
    private Client to;
    private final ClientConnection fromConn;
    
    private final Client from;
    
    private final ChatGroup chatGroup;
    
    private final int chatType;
    
    // Individual Chat Constructor
    ChatBox(Client to, ClientConnection fromConn, int chatType, boolean isPrompt) {
        initComponents();
        //this.setLocation(, );
        this.to= to;
        this.fromConn = fromConn;
        chatGroup = null;
        this.chatType = chatType;
        
        // Check if message box is still there
        if(!isPrompt)
            this.fromConn.addMessageBoxToListener(new MessageBox(boxTb, to.getUniqueId()));
        
        // Initialize header with username chat to
        userNameLbl.setText("Chatting with " + to.getUserName());
        
        from = new Client(fromConn.getUniqueId(), fromConn.getUserName(), fromConn.getConnectedDate());
        boxTb.append("Connection is established\n>");
        
        // Initialize text field to enter message
        messageBox.setText("");
        messageBox.requestFocus();
        unLbl.setText(from.getUserName());
        
        // Set chat box title
        this.setTitle("Private Chatting with " + to.getUserName());
        whoIsInBtn.setVisible(false);
        
        // Setting dialogue box position on pc screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        // Only close the current windows, Prevent closing main program if close button pressed
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                System.out.println("Closing Window");
                closeDialogue();
            }
        });
    }
    
    // Group Chat Constructor
    ChatBox(ChatGroup cg, ClientConnection fromConn, int chatType, boolean isPrompt) {
        initComponents();
        
        this.chatGroup = cg;
        this.fromConn = fromConn;
        this.chatType = chatType;
        // Check if message box is still there
        if(!isPrompt)
            this.fromConn.addGroupBoxToListener(new MessageBox(boxTb, cg.getGroupName()));
        
        // Initialize header with group name
        userNameLbl.setText("Group: "+ cg.getGroupName());
        
        
        whoIsInBtn.setVisible(true);
        
        from = new Client(fromConn.getUniqueId(), fromConn.getUserName(), fromConn.getConnectedDate());
        boxTb.append("Connection is established\n>");
        messageBox.setText("");
        messageBox.requestFocus();
        unLbl.setText(from.getUserName());
        this.setTitle("Group Chat: " + cg.getGroupName());
        
        // Setting dialogue box position on pc screen
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        // Only close the current windows, Prevent closing main program if close button pressed
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                System.out.println("Closing Window");
                closeDialogue();
            }
        });
    }
    
    private void closeDialogue() {
        try {
            if(chatType == ChatMessage.MESSAGETO)
                this.fromConn.getServerListener().closeDialogue(to);
            else if(chatType == ChatMessage.GROUP_CHAT)
                this.fromConn.getServerListener().closeGroupDialogue(this.chatGroup);
        } catch (ConcurrentModificationException e) {
            boxTb.append("Can't close the Window. Please try again.. \n> ");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        boxTb = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        userNameLbl = new javax.swing.JLabel();
        messageBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        unLbl = new javax.swing.JLabel();
        whoIsInBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boxTb.setEditable(false);
        boxTb.setColumns(20);
        boxTb.setRows(5);
        jScrollPane1.setViewportView(boxTb);

        jLabel1.setText("Chatbox");

        userNameLbl.setText("<<username>>");

        messageBox.setText("jTextField1");
        messageBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Login as:");

        unLbl.setText("<<username>>");

        whoIsInBtn.setText("Who is in?");
        whoIsInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whoIsInBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unLbl))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(userNameLbl)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(whoIsInBtn))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                                .addComponent(messageBox)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLbl)
                    .addComponent(whoIsInBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(unLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageBoxActionPerformed
        try {
            // if is a empty message, ignore
            if(messageBox.getText().equals("")) {
                return;
            }
            if(this.chatType == ChatMessage.MESSAGETO) {    // individual chat
                fromConn.getSOutput().writeObject(new ChatMessage(to, from, this.chatType, messageBox.getText()));
                boxTb.append("Me: " +
                        messageBox.getText() + "\n>");
            }
            else if (this.chatType == ChatMessage.GROUP_CHAT){  // Group Chat
                
                System.out.println("==GROUP CHAT==");
                for(Client test : chatGroup.getGroupTo()) {
                    System.out.println("Test " + test.getUniqueId() + ". "+ test.getUserName());
                }
                fromConn.getSOutput().writeObject(new ChatMessage(chatGroup, from, this.chatType, messageBox.getText()));
                
            }
            messageBox.setText("");
        } catch (IOException ex) {
            boxTb.append("\n" + "Can't connect to client: " + ex + "\n");
            
            
        }
    }//GEN-LAST:event_messageBoxActionPerformed

    private void whoIsInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whoIsInBtnActionPerformed
        StringBuilder s = new StringBuilder(this.chatGroup.getGroupName() + " Member: \n");
        if(this.chatGroup != null) {
            for(Client c : this.chatGroup.getGroupTo()) {
                s.append(c.getUserName()).append("\n");
            }
            
            JOptionPane.showConfirmDialog(null, s, "Who is in?", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_whoIsInBtnActionPerformed

    public JTextArea getMessageTextArea() {
        return this.boxTb;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea boxTb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField messageBox;
    private javax.swing.JLabel unLbl;
    private javax.swing.JLabel userNameLbl;
    private javax.swing.JButton whoIsInBtn;
    // End of variables declaration//GEN-END:variables
}
